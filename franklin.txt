//2023-07-26
Based on "Build a Calendar With Vue, Vuetify & Firebase" tutorial
https://www.youtube.com/watch?v=2NOsjTT1b_k

//01-05 Creating a DB

First we create a database with Google Firestore (part of Firebase).
My database named "vue-calendar"

In there create a collection ('table' in ordinary DB) - 'calEvent'
Each collection has 'documents' 
In our collection create a document:
- autoID
- name : String : Doctors Appointment
- details : String : Dr Williams at 1:00PM
- start : String : 2023-07-26
- end : String : 2023-07-26
- color : String : #ff8080

Then create another document with the same structure - and we have all set

//06-40 Register App
Go back in FB to the list of your apps, choose this one and click on "</>" sign
Then Register app ('vue-calendar')

FB will give us back a "FireBase" object with config details:
====
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAqpbi1pJEOZqHCRbZzm3WDYcZRz7bnfPs",
  authDomain: "vue-calendar-edb63.firebaseapp.com",
  projectId: "vue-calendar-edb63",
  storageBucket: "vue-calendar-edb63.appspot.com",
  messagingSenderId: "308904066627",
  appId: "1:308904066627:web:912e4f626d542de6bedef6"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
====

//7-40 installing cli and vue

>npm i -g @vue/cli
>vue create calendar
>cd calendar

//08-30 Installing Vuetify plugin

>vue add vuetify

And two other packages we need to install with NPM:

>npm i firebase vue-textarea-autosize

//09-30 Ready to run a server

>npm run serve

//11-00 REgistering vue-textarea-autosize & firebase

in main.js:

import VueTextareaAutosize from 'vue-textarea-autosize'
import firebase from 'firebase/app'
import 'firebase/firestore'

Vue.use(VueTextareaAutosize)

Vue.config.productionTip = false

firebase.initializeApp({
  apiKey: "AIzaSyAqpbi1pJEOZqHCRbZzm3WDYcZRz7bnfPs",
  authDomain: "vue-calendar-edb63.firebaseapp.com",
  projectId: "vue-calendar-edb63",
  storageBucket: "vue-calendar-edb63.appspot.com",
  messagingSenderId: "308904066627",
  appId: "1:308904066627:web:912e4f626d542de6bedef6"
})

export const db = firebase.firestore()

new Vue({
  vuetify,
  render: h => h(App)
}).$mount('#app')

//12-30 File main.js is ready, now go to App.vue

Delete all the preset garbage and insert our own component, 'Calendar'

<template>
  <v-app>
    <v-content>
      <Calendar />
    </v-content>
  </v-app>
</template>

<script>
import Calendar from './components/Calendar';

export default {
  name: 'App',

  components: {
    Calendar,
  },

  data: () => ({
    //
  }),
};
</script>

We surely need to create this one 'Calendar' component:

<template>
  <div class="">Calendar</div>
</template>

<script>
  export default {
    name: 'Calendar',

    data: () => ({

    }),
  }
</script>

The template is set!

//14-00 
Source code for calendar available at https://v2.vuetifyjs.com/en/components/calendars/#events

Grab the sample code and paste it as a template in 'Calendar' component

<template>
  <v-row class="fill-height">
    <v-col>
      <v-sheet height="64">
        <v-toolbar
          flat
        >
          <v-btn
            outlined
            class="mr-4"
            color="grey darken-2"
            @click="setToday"
          >
            Today
          </v-btn>
          <v-btn
            fab
            text
            small
            color="grey darken-2"
            @click="prev"
          >
            <v-icon small>
              mdi-chevron-left
            </v-icon>
          </v-btn>
          <v-btn
            fab
            text
            small
            color="grey darken-2"
            @click="next"
          >
            <v-icon small>
              mdi-chevron-right
            </v-icon>
          </v-btn>
          <v-toolbar-title v-if="$refs.calendar">
            {{ $refs.calendar.title }}
          </v-toolbar-title>
          <v-spacer></v-spacer>
          <v-menu
            bottom
            right
          >
            <template v-slot:activator="{ on, attrs }">
              <v-btn
                outlined
                color="grey darken-2"
                v-bind="attrs"
                v-on="on"
              >
                <span>{{ typeToLabel[type] }}</span>
                <v-icon right>
                  mdi-menu-down
                </v-icon>
              </v-btn>
            </template>
            <v-list>
              <v-list-item @click="type = 'day'">
                <v-list-item-title>Day</v-list-item-title>
              </v-list-item>
              <v-list-item @click="type = 'week'">
                <v-list-item-title>Week</v-list-item-title>
              </v-list-item>
              <v-list-item @click="type = 'month'">
                <v-list-item-title>Month</v-list-item-title>
              </v-list-item>
              <v-list-item @click="type = '4day'">
                <v-list-item-title>4 days</v-list-item-title>
              </v-list-item>
            </v-list>
          </v-menu>
        </v-toolbar>
      </v-sheet>
      <v-sheet height="600">
        <v-calendar
          ref="calendar"
          v-model="focus"
          color="primary"
          :events="events"
          :event-color="getEventColor"
          :type="type"
          @click:event="showEvent"
          @click:more="viewDay"
          @click:date="viewDay"
          @change="updateRange"
        ></v-calendar>
        <v-menu
          v-model="selectedOpen"
          :close-on-content-click="false"
          :activator="selectedElement"
          offset-x
        >
          <v-card
            color="grey lighten-4"
            min-width="350px"
            flat
          >
            <v-toolbar
              :color="selectedEvent.color"
              dark
            >
              <v-btn icon>
                <v-icon>mdi-pencil</v-icon>
              </v-btn>
              <v-toolbar-title v-html="selectedEvent.name"></v-toolbar-title>
              <v-spacer></v-spacer>
              <v-btn icon>
                <v-icon>mdi-heart</v-icon>
              </v-btn>
              <v-btn icon>
                <v-icon>mdi-dots-vertical</v-icon>
              </v-btn>
            </v-toolbar>
            <v-card-text>
              <span v-html="selectedEvent.details"></span>
            </v-card-text>
            <v-card-actions>
              <v-btn
                text
                color="secondary"
                @click="selectedOpen = false"
              >
                Cancel
              </v-btn>
            </v-card-actions>
          </v-card>
        </v-menu>
      </v-sheet>
    </v-col>
  </v-row>
</template>

We got a bunch of errors in console - because we didn't create those methods used in template yet.

Vuetify has its own grid system, something like in Bootstrap - v-row & v-col

v-sheet is like a container, you put other components into it.

v-toolbar is like a navbar

If there are many events in a spot, the message '5 more' is displayed.
It corresponds to 
@click:more="viewDay"
click event

If we click on a certain day, click:date is called:
@click:date="viewDay"

Both of them, @click:more&@click:day are bind to 'viewDay' method -
which we need to create.

@change="updateRange"
is called when we change the month or the type of calendar (month-week-day).

In 'v-menu' we work with the selected event:

v-model="selectedOpen"
could be true or false
If it's true - the 'v-card' is opened

Right inside that 'v-card' we do have 
<v-toolbar
    :color="selectedEvent.color"
    dark
>
with the color of the selected event.
And another stuff like buttons and the event name in that toolbar,
as well as the event body
<v-card-text>
    ...
</v-card-text>

//21-00 scripts

First describe data:
data: () => ({
    today: new Date().toISOString().substr(0, 10),
    focus: new Date().toISOString().substr(0, 10),
}),

Here we set 'today' as the result of Date()
and focus is the same - we focus on the current day by default.

Further on we describe all the other variables needed:

data: () => ({
    today: new Date().toISOString().substr(0, 10),
    focus: new Date().toISOString().substr(0, 10),
    type: "month",
    typeToLabel: {
    month: "Month",
    week: "Week",
    day: "Day",
    "4day": "4 Days"
    },
    name: null,
    details: null,
    start: null,
    end: null, 
    color: "#1976D2",
    currentlyEditing: null,
    selectedEvent: {},
    selectedElement: null,
    selectedOpen: false,
    events: [],
    dialog: false
}),

Quite a few of them - but that's the deal
//2023-07-27
//25-00 methods
 
Next step is to create methods to deal with events:
First we create an initializing step - at the mounted stage:
mounted() {
    this.getEvents()
}

Importing Firebase DB is needed:

import { db } from '@/main'

***************
My connection to firebase is failed.
Exactly: 

These dependencies were not found:
* firebase/app in ./src/main.js
* firebase/firestore in ./src/main.js

Switched off fb - for the meantime
******************

Firebase object that we have returns promise,
so we should make the getEvents() function async:

methods: {
    async getEvents() {
    let snapshot = await db.collection('calEvent').get()
    }
}

This 'snapshot' will contain a promise of events - returned by 'db'.

What we gonna do next - loop through this 'snapshot' and get all the events:

methods: {
    async getEvents() {
    let snapshot = await db.collection('calEvent').get()
    let events = []
    snapshot.forEach(doc => {
        console.log(doc)
    });
    }
}

In console we should get the listing of events from Firebase DB.

But the 'id' of the event is not in this prototype (this moment Minin talked about too)
So in this loop we should somehow attach an id to the document fields:

async getEvents() {
let snapshot = await db.collection('calEvent').get()
let events = []
snapshot.forEach(doc => {
    let appData = doc.data()
    appData.id = doc.id
    events.push(appData)
});
this.events = events
}

In forEach we get the data of each event (doc.data()) and put it into 'appData'
then attach to it doc.id and push it into the events array

After this forEach loop, we reassign this.events to newlyformed events array.

//00-30 Event color
This is pretty easy, color is bind to getEventColor method, so we should simply
implement it

getEventColor(ev) {
    return ev.color
}